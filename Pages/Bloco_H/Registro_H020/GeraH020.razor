@page "/EfdFiscal/Bloco_H/Registro_H020/GeraH020"

@using JeLSolucoesFiscais.Aplicacao.Criptografias
@using JeLSolucoesFiscais.Aplicacao.Usuario
@inject LocalStorageService LocalStorageService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>SoluFiscal</PageTitle>

@if (acessoLiberado)
{

  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f0f4f8;
      color: #333;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }

    .row {
      margin-bottom: 20px;
    }

    .col-2 {
      background-color: #ffffff;
      // border-radius: 12px 12px 0 0;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
      padding: 20px;
      transition: box-shadow 0.3s ease;
    }

    .col-10 {
      background-color: #ffffff;
      //border-radius: 0 0 12px 12px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
      padding: 20px;
      transition: box-shadow 0.3s ease;
    }

      .col-2:hover, .col-10:hover {
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
      }

    .form-floating {
      margin-bottom: 15px;
    }

    .form-control, .btn {
      border-radius: 8px;
    }

    .btn-secondary {
      background-color: #6c757d;
      border-color: #6c757d;
      transition: all 0.3s ease;
    }

      .btn-secondary:hover {
        background-color: #5a6268;
        border-color: #545b62;
        transform: translateY(-2px);
      }

    .form-check {
      margin-bottom: 10px;
    }

    .upload-container {
      background-color: #f8f9fa;
      border: 3px dashed #007bff;
      border-radius: 12px;
      padding: 40px;
      text-align: center;
      transition: all 0.3s ease;
      cursor: pointer;
      position: relative;
      overflow: hidden;
    }

      .upload-container:hover {
        background-color: #e3f2fd;
        border-color: #0056b3;
      }

      .upload-container p {
        color: #007bff;
        font-size: 20px;
        margin-top: 10px;
        font-weight: bold;
      }

      .upload-container input[type="file"] {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
      }

    #fileContentContainer_Excel {
      background-color: #ffffff;
      border-radius: 12px;
      padding: 20px;
      margin-top: 20px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    #fileContentContainer_Sped {
      background-color: #ffffff;
      border-radius: 12px;
      padding: 20px;
      margin-top: 20px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    .file-entry {
      background-color: #f8f9fa;
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 15px;
      transition: all 0.3s ease;
    }

      .file-entry:hover {
        background-color: #e9ecef;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      }

    .file-content {
      font-family: 'Courier New', Courier, monospace;
      font-size: 14px;
      overflow-x: auto;
      background-color: #f1f3f5;
      padding: 10px;
      border-radius: 6px;
    }

    #BtnAlteraAquivos, #BtnDownloadAquivos {
      padding: 12px 24px;
      font-size: 16px;
      border: none;
      width: 100%;
      background-color: #6f42c1;
      color: white;
      transition: all 0.3s ease;
      border-radius: 30px;
      box-shadow: 0 2px 3px rgba(0,0,0,0.1);
    }

      #BtnAlteraAquivos:hover, #BtnDownloadAquivos:hover {
        background-color: #6610f2;
        border: none;
        transform: translateY(-2px);
        box-shadow: 0 3px 6px rgba(0,0,0,0.15);
      }

    #BtnAlteraAquivos, #BtnDownloadAquivos, #BtnGerarRelatorio {
      padding: 12px 24px;
      font-size: 16px;
      border: none;
      width: 100%;
      background-color: #6f42c1;
      color: white;
      transition: all 0.3s ease;
      border-radius: 30px;
      box-shadow: 0 2px 3px rgba(0,0,0,0.1);
    }

      #BtnAlteraAquivos:hover, #BtnDownloadAquivos:hover, #BtnGerarRelatorio:hover {
        background-color: #6610f2;
        border: none;
        transform: translateY(-2px);
        box-shadow: 0 3px 6px rgba(0,0,0,0.15);
      }

    .toast {
      border-radius: 12px;
    }

    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0,0,0,0.4);
    }

    .modal-content {
      background-color: #fefefe;
      margin: 5% auto;
      padding: 20px;
      border: 1px solid #888;
      width: 90%;
      max-width: 1000px;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #ddd;
      padding-bottom: 10px;
      margin-bottom: 20px;
    }

      .modal-header h2 {
        margin: 0;
        color: #2c3e50;
      }

    .fechar {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
    }

      .fechar:hover,
      .fechar:focus {
        color: #000;
        text-decoration: none;
        cursor: pointer;
      }

    .relatorio-table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
      box-shadow: 0 2px 3px rgba(0,0,0,0.1);
    }

      .relatorio-table th,
      .relatorio-table td {
        border: 1px solid #ddd;
        padding: 12px;
        text-align: left;
      }

      .relatorio-table th {
        background-color: #3498db;
        color: white;
        font-weight: bold;
      }

      .relatorio-table tr:nth-child(even) {
        background-color: #f2f2f2;
      }

      .relatorio-table tr:hover {
        background-color: #e6f3ff;
      }

    #arquivo-sped {
      margin: 10px 0;
    }

    #tabelaExcel {
      width: 100%;
      border-collapse: collapse;
      font-family: Arial, sans-serif;
      font-size: 16px;
      margin-top: 10px;
      box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
      border-radius: 8px;
      overflow: hidden;
    }

      #tabelaExcel thead {
        background-color: #007bff;
        color: white;
        text-align: left;
      }

      #tabelaExcel th, #tabelaExcel td {
        padding: 12px;
        border-bottom: 1px solid #ddd;
      }

      #tabelaExcel tbody tr:nth-child(odd) {
        background-color: #f2f2f2;
      }

      #tabelaExcel tbody tr:hover {
        background-color: #d1ecf1;
        cursor: pointer;
        transition: background-color 0.3s ease-in-out;
      }

      #tabelaExcel th {
        text-transform: uppercase;
      }

  </style>

  <!-- Modal de Relatório SPED -->
  <div id="modal-relatorio-sped" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>Relatório SPED - Ajustes Saídas</h2>
        <span class="fechar">&times;</span>
      </div>
      <div id="relatorio-conteudo"></div>
    </div>
  </div>

  <div class="position-fixed top-0 end-0 p-3" style="z-index: 11">

    <div id="ValidaSistema" class="toast bg-danger text-dark border-0" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <strong id="TituloValidaSistema" class="me-auto"></strong>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
        <p><b id="MensagemValidaSistema"></b></p>
      </div>
    </div>

    <div id="alertToastSucesso" class="toast bg-success text-dark border-0" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <strong class="me-auto">Sucesso</strong>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
        <b>Arquivo atualizado com sucesso,</b><br /> <a href="/JeLSolucoesFiscais/EfdPisCofins" onclick="downloadArquivos()"><b>Clique aqui para fazer o download</b></a>
      </div>
    </div>

    <div id="alertToastFalha" class="toast bg-danger text-dark border-0" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <strong class="me-auto">Falha</strong>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
        <a><b>Verifique se seu arquivo possui os registros D100 e D190, <br />  Ou se você preencheu corretamente as opções.</b></a>
      </div>
    </div>

  </div>



  <div class="container">
    <div class="row">
      @*     Adicionar o download de um arquivo padrão para o cliente.  *@
    </div>
    <div class="row mt-3 justify-content-between">
      <div class="col-6">
        <div class="upload-container"
             id="uploadContainer_Excel">
          <input type="file" id="inputExcel" accept=".xlsx, .xls" />
          <p>Clique ou arraste aqui seu arquivo de Excel</p>
        </div>
      </div>
      <div class="col-6">
        <div class="upload-container"
             id="uploadContainer_txt"
             ondrop="handleDrop(event)"
             ondragover="handleDragOver(event)">
          <input type="file" id="fileInput" accept=".txt" multiple onchange="handleFilesSelected(event)" />
          <p>Clique ou arraste aqui seu arquivo do Sped</p>
        </div>
      </div>
    </div>
    <div class="row col-6">
      <div class="col">
        <button id="BtnAlteraAquivos" onclick="alterarArquivos()" style="visibility:hidden">Alterar Arquivos</button>
      </div>
      <div class="col">
        <button id="BtnDownloadAquivos" onclick="downloadArquivos()" style="visibility:hidden">Download</button>
      </div>
      <div class="col">
        <button id="BtnGerarRelatorio" onclick="btnGerarRelatorio_click()" style="visibility:hidden">Gerar Relatório</button>
      </div>
    </div>
    <div class="row">
      <div class="col-6">
        <div id="fileContentContainer_Excel">
          <h4>Conteúdo do Arquivo Excel:</h4>
          <table id="tabelaExcel">
            <thead>
              <tr>
                <th>CodProduto</th>
                <th>Cst</th>
                <th>BcICMS</th>
                <th>VrICMS</th>
              </tr>
            </thead>
            <tbody></tbody>
          </table>
        </div>
      </div>
      <div class="col-6">
        <div id="fileContentContainer_Sped">
          <h4>Conteúdo do Arquivo Sped:</h4>
          <div id="fileContents_sped"></div>
        </div>
      </div>
    </div>
  </div>
  <div id="loadingScreen" class="loading-screen">
    <div class="spinner"></div>
    <p>Carregando...</p>
  </div>


  <script>
    if (performance.navigation.type === performance.navigation.TYPE_RELOAD) {
        let files = [];
    } else {
        files = [];
    }

    // LEITOR DO SPED
    function handleFilesSelected(event) {
        files = Array.from(event.target.files);
        displayFileContents();
    }

    function handleDrop(event) {
        event.preventDefault();
        files = Array.from(event.dataTransfer.files);
        displayFileContents();
    }

    function handleDragOver(event) {
        event.preventDefault();
    }

    function displayFileContents() {
        const BtnalterarArquivos = document.getElementById('BtnAlteraAquivos');
        BtnalterarArquivos.style.visibility = "visible";

        const fileContentsContainer = document.getElementById('fileContents_sped');
        fileContentsContainer.innerHTML = '';
        files.forEach((file, index) => {
            const reader = new FileReader();
            reader.onload = function(e) {
                const fileContent = e.target.result;
                const fileEntry = document.createElement('div');
                fileEntry.classList.add('file-entry');
                fileEntry.innerHTML = `
                            <h5>Arquivo ${index + 1}:</h5>
                            <pre class="file-content" id="fileContent-${index}">${fileContent}</pre>
                            `;
                fileContentsContainer.appendChild(fileEntry);
            };
            reader.readAsText(file);
        });
        document.getElementById('fileContentContainer_Sped').style.display = 'block';
    }
    //LEITOR DO EXCEL

        document.getElementById('inputExcel').addEventListener('change', function(event) {
        const file = event.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = function(e) {
            const data = new Uint8Array(e.target.result);
            const workbook = XLSX.read(data, { type: 'array' });

            const sheet = workbook.Sheets[workbook.SheetNames[0]];
            const jsonData = XLSX.utils.sheet_to_json(sheet);

            const tbody = document.querySelector("#tabelaExcel tbody");
            tbody.innerHTML = "";
            jsonData.forEach(row => {
                const tr = document.createElement("tr");
                tr.id = row.CodProduto
                tr.innerHTML = `
                    <td>${row.CodProduto || ''}</td>
                    <td>${row.Cst || ''}</td>
                    <td>${row.BcICMS || ''}</td>
                    <td>${row.VrICMS || ''}</td>
                `;
                tbody.appendChild(tr);
            });
        };
        reader.readAsArrayBuffer(file);
    });


    function alterarArquivos() {

        document.getElementById('loadingScreen').style.display = 'flex';
        BtnDownloadAquivos = document.getElementById('BtnDownloadAquivos');
        BtnGerarRelatorio = document.getElementById('BtnGerarRelatorio');

        let contadorNovasLinhas = 0, alteracaoLinhas = 0

        files.forEach((file, index) => {
            const fileContentElement = document.getElementById(`fileContent-${index}`);
            if (fileContentElement) {
                let fileContent = fileContentElement.textContent;

                let lines = fileContent.split('\n');
                let newLines = [];

                for (let i = 0; i < lines.length; i++) {

                    newLines.push(lines[i]);
                    let valor = lines[i].split('|');

                  if(lines[i].startsWith('|H010|'))
                  {
                     let linhaH020 = fnCriaLinhaH020(lines[i]);
                       newLines.push(linhaH020);
                  }

                }

                let indiceH990 = newLines.findIndex(linha => linha.startsWith('|H990|'))
                if (indiceH990 !== -1) {
                let indiceH010 = newLines.findIndex(linha => linha.startsWith('|9900|H010|'))
                let quantidade =  newLines[indiceH010].split('|')
                let quantidadeH990 = newLines[indiceH990].split('|')
                let quantidadeH020 = quantidade[3]
                newLines[indiceH990] = `|H990|${parseInt(quantidadeH990[2]) + parseInt(quantidadeH020)}|`
                }

                let indice99009900 = newLines.findIndex(linha => linha.startsWith('|9900|9900|'))
                if (indice99009900 !== -1) {
                let quantidade = newLines[indice99009900].split('|')
                newLines[indice99009900] = `|9900|9900|${parseInt(quantidade[3]) + 1}|`
                }

                let indice9900 = newLines.findIndex(linha => linha.startsWith('|9900|H010|'))
                if (indice9900 !== -1) {
                let quantidade = newLines[indice9900].split('|')
                newLines.splice(indice9900 + 1, 0, `|9900|H020|${quantidade[3]}|`)
                }

                let indice9990 = newLines.findIndex(linha => linha.startsWith('|9990|'))
                if (indice9990 !== -1) {
                 let quantidade = newLines[indice9990].split('|')
                 newLines[indice9990] = `|9990|${parseInt(quantidade[2]) + 1}|`
                }

                 let indice9999 = newLines.findIndex(linha => linha.startsWith('|9999|'))
                 if (indice9999 !== -1) {
                 newLines[indice9999] = `|9999|${newLines.length - 1}|`
                 }


                 function fnCriaLinhaH020(line){
                   let values = line.split('|');
                   let codSemZerosAEsquerda;
                   let arrValoresH020;
                   let linhaH020;
                   let retorno;

                   codSemZerosAEsquerda = fnRemoveZerosAEsquerda(values[2]);
                   arrValoresH020 = fnRetornaValoresParaH020(codSemZerosAEsquerda);

                   linhaH020 = `|H020|${arrValoresH020[1]}|${arrValoresH020[2]}|${arrValoresH020[3]}|`

                     return linhaH020;
                 }

                 function fnRetornaValoresParaH020(codProdutoSemZerosAEsquerda){
                   let tr = document.getElementById(codProdutoSemZerosAEsquerda)
                   let arr ;

                     let tds = tr.querySelectorAll("td");

                     let CodProduto = tds[0].textContent;
                     let Cst = tds[1].textContent;
                     let BcICMS = fnArredondarDuasCasas(tds[2].textContent);
                     let VrICMS = fnArredondarDuasCasas(tds[3].textContent);

                     arr = [CodProduto,Cst,BcICMS,VrICMS]
                     return arr;
                 }
                 function fnRemoveZerosAEsquerda(codProduto){
                     return codProduto.replace(/^0+/, '') || '0';
                 }
                 function fnArredondarDuasCasas(valor) {
                   return parseFloat(valor).toFixed(2).toString().replace('.',',');
                 }

                fileContent = newLines.join('\n');
                fileContentElement.textContent = fileContent;
                files[index] = new File([fileContent], file.name, { type: file.type });
            }
        });

            if (1 + 1 == 2) {
                setTimeout(function() {
                    document.getElementById('loadingScreen').style.display = 'none';
                    var toastEl = document.getElementById('alertToastSucesso');
                    var toast = new bootstrap.Toast(toastEl);
                    toast.show();
                    BtnDownloadAquivos.style.visibility = "visible";
                    BtnGerarRelatorio.style.visibility = "visible";
                    return;
                }, 1000);
            } else {
                 BtnDownloadAquivos.style.visibility = "";
                var toastEl = document.getElementById('alertToastFalha');
                var toast = new bootstrap.Toast(toastEl);
                toast.show();
                BtnDownloadAquivos.style.visibility = "hidden";
                return;
            }
        }


    function downloadArquivos() {
        files.forEach((file, index) => {
            const fileContent = document.getElementById(`fileContent-${index}`).textContent;
            const fileBytes = new TextEncoder().encode(fileContent);
            const base64Data = arrayBufferToBase64(fileBytes.buffer);

            const link = document.createElement('a');
            link.href = 'data:text/plain;base64,' + base64Data;
            link.download = `Novo-${file.name}`;
            link.click();
        });
    }

    function arrayBufferToBase64(buffer) {
        let binary = '';
        const bytes = new Uint8Array(buffer);
        const len = bytes.byteLength;
        for (let i = 0; i < len; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return window.btoa(binary);
    }

    function AtualizaRegistro(lines, posicaoAjuste, valorIncluir = '') { //Nova Função para melhorar o codigo
        let values = lines.split('|');
        values[posicaoAjuste] = valorIncluir;

        lines = values.join('|');
        return lines;
    }


    function ModalValidaSistema(tipoValidacao, mensagem) { //Nova Função para melhorar o codigo
        var toastEl = document.getElementById('ValidaSistema'), mensagemValidaSistema = document.getElementById('MensagemValidaSistema'),
            tituloValidaSistema = document.getElementById('TituloValidaSistema');
        if (tipoValidacao === 'Sucesso') {
            toastEl.classList = 'toast bg-success text-dark border-0';
            tituloValidaSistema.innerText = 'Sucesso';
            mensagemValidaSistema.innerText = mensagem;
        } else if (tipoValidacao === 'Falha') {
            toastEl.classList = 'toast bg-danger text-dark border-0';
            tituloValidaSistema.innerText = 'Falha';
            mensagemValidaSistema.innerText = mensagem;
        } else {
            toastEl.classList = 'toast bg-warning text-dark border-0';
            tituloValidaSistema.innerText = 'Alerta'
            mensagemValidaSistema.innerText = mensagem;
        }

        var toast = new bootstrap.Toast(toastEl);
        toast.show();
        return;
    }

    function processarArquivoSPED(conteudo) {
        const linhas = conteudo.split('\n');
        let somaBaseCalculo = 0;
        let somaTotalAjuste = 0;

        linhas.forEach(linha => {
            if (linha.startsWith('|H020|')) {
                const campos = linha.split('|');
                if (campos.length >= 5) {
                    let BaseCalculo = parseFloat(campos[3].replace(',', '.')) || 0;
                    let totalAjuste = parseFloat(campos[4].replace(',', '.')) || 0;

                    somaBaseCalculo += BaseCalculo;
                    somaTotalAjuste += totalAjuste;
                }
            }
        });

        return {
            somaBaseCalculo,
            somaTotalAjuste
        };
    }

    function gerarRelatorioHTML(somas) {
        let html = `
        <table class="relatorio-table">
          <thead>
            <tr>
              <th>Base Cálculo Total</th>
              <th>Valor ICMS Total</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>${somas.somaBaseCalculo.toFixed(2)}</td>
              <td>R$ ${somas.somaTotalAjuste.toFixed(2)}</td>
            </tr>
          </tbody>
        </table>`;

        return html;
    }

      function btnGerarRelatorio_click() {
      const arquivo = document.getElementById(`fileContent-0`).textContent//inputArquivoSPED.files[0];
      const ajustes = processarArquivoSPED(arquivo);
      const relatorioHTML = gerarRelatorioHTML(ajustes);
      document.getElementById('relatorio-conteudo').innerHTML = relatorioHTML;
      document.getElementById('modal-relatorio-sped').style.display = 'block';
      }
      document.getElementById('modal-relatorio-sped').querySelector('.fechar').onclick = () => {
          document.getElementById('modal-relatorio-sped').style.display = 'none';
      };

      window.onclick = (event) => {
          if (event.target == document.getElementById('modal-relatorio-sped')) {
              document.getElementById('modal-relatorio-sped').style.display = 'none';
          }
      };

  </script>
}
else
{
  @if (usuarioJaAutenticado == true)
  {
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 11">
      <div id="alertLogin" class="bg-danger text-dark border-0 p-3 rounded" role="alert">
        <div class="d-flex justify-content-between align-items-center mb-2">
          <strong class="me-auto">Alerta</strong>
          <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
          <b>Já existe um usuário logado com essa conta, redirecionando para o Login</b>
        </div>
      </div>
    </div>
  }
  else
  {
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 11">
      <div id="alertLogin" class="bg-danger text-dark border-0 p-3 rounded" role="alert">
        <div class="d-flex justify-content-between align-items-center mb-2">
          <strong class="me-auto">Alerta</strong>
          <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
          <b>Para acessar esse módulo é necessário fazer Login.</b> <br /> <a href="/JeLSolucoesFiscais/EfdPisCofins"> <b>Clique aqui para fazer Login</b> </a>
        </div>
      </div>
    </div>
  }
}


@code {

  private bool isAuthenticated;
  private bool acessoLiberado = true;
  private bool usuarioJaAutenticado;
  private string idLoginDb = "";
  private string idLoginCach = "";

  protected override async Task OnInitializedAsync()
  {

    acessoLiberado = await JS.InvokeAsync<string>("VerificaLogin") == "usuario não logado" ? false : true;

    idLoginDb = await JS.InvokeAsync<string>("getTabela", "Usuarios_LoginLogOff", "IdLogin");
    idLoginCach = await LocalStorageService.GetItemAsync("Hash");

    usuarioJaAutenticado = idLoginDb == idLoginCach ? false : true;

    if (usuarioJaAutenticado == true)
    {
      usuarioJaLogado();
    }
  }
  protected async void usuarioJaLogado()
  {
    acessoLiberado = false;
    await Task.Delay(1000);
    await JS.InvokeAsync<string>("Sair");
    await Task.Delay(1000);
    NavigationManager.NavigateTo("/JeLSolucoesFiscais", true);

  }
}