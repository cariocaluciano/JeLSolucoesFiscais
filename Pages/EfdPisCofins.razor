@page "/EfdPisCofins"

@using JeLSolucoesFiscais.Aplicacao.Usuario
@inject LocalStorageService LocalStorageService

<PageTitle>Efd-PisCofins</PageTitle>

@if (isAuthenticated)
{

    <style>
        .upload-container {
            border: 2px dashed #007bff;
            padding: 20px;
            text-align: center;
            margin-bottom: 20px;
            cursor: pointer;
            width: 100%;
        }

            .upload-container p {
                margin: 0;
                font-size: 16px;
                color: #007bff;
            }

        #fileContentContainer {
            display: none;
        }

        .file-entry {
            margin-bottom: 10px;
        }

        .file-content {
            white-space: pre-wrap; /* Mantém a formatação do texto */
        }

    </style>



    <div class="position-fixed top-0 end-0 p-3" style="z-index: 11">

        <div id="ValidaSistema" class="toast bg-danger text-dark border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong id="TituloValidaSistema" class="me-auto"></strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                <p><b id="MensagemValidaSistema"></b></p>
            </div>
        </div>

        <div id="alertToastSucesso" class="toast bg-success text-dark border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong class="me-auto">Sucesso</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                <b>Arquivo atualizado com sucesso,</b><br /> <a href="/JeLSolucoesFiscais/EfdPisCofins" onclick="downloadArquivos()"><b>Clique aqui para fazer o download</b></a>
            </div>
        </div>

        <div id="alertToastFalha" class="toast bg-danger text-dark border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong class="me-auto">Falha</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                <a><b>Verifique se seu arquivo possui os registros D100 e D190, <br />  Ou se você preencheu corretamente as opções.</b></a>
            </div>
        </div>

    </div>



    <div class="container">
        <div class="row">
            <div class="col-2">
                <div class="dropdown">
                    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenu2" data-bs-toggle="dropdown" aria-expanded="false">
                        Tipo de ajuste
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="dropdownMenu2">
                        <li><button class="dropdown-item" type="button" onclick="BtnTipoAjusteInclusao()">Inclusão</button></li>
                        <li><button class="dropdown-item" type="button">Alteração</button></li>
                    </ul>
                </div>
            </div>
            <div class="col-2">
                <div id="AcaoParaInclusaoSelecionaBloco" style="display:none;border:2px solid #ced4da;" class="p-2">
                    <p>Selecione o registro<br>para inclusão</p>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="" id="CheckD195d197">
                        <label class="form-check-label" for="flexCheckDefault">
                            Registros D195/D197
                        </label>
                    </div>
                </div>
            </div>

            <div class="col-2">
                <div id="AcaoParaDefinirCfopEModelo" style="border:2px solid #ced4da;" class="p-2 invisible">
                    <form class="form-floating">
                        <div class="row">
                            <div class="col-12">
                                <div class="input-group">
                                    <input type="text" class="form-control" id="ModeloDropDown" placeholder="Modelo" readonly>
                                    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownModelo" data-bs-toggle="dropdown" aria-expanded="false"></button>
                                    <ul class="dropdown-menu" aria-labelledby="dropdownModelo">
                                        <li><a class="dropdown-item" onclick="selectOption('Todos')">Todos</a></li>
                                        <li><a class="dropdown-item" onclick="selectOption('57')">57</a></li>
                                        <li><a class="dropdown-item" onclick="selectOption('63')">63</a></li>
                                        <li><a class="dropdown-item" onclick="selectOption('67')">67</a></li>
                                    </ul>
                                </div>

                                <script>
                                    function selectOption(option) {
                                        document.getElementById('ModeloDropDown').value = option;
                                    }
                                </script>
                            </div>
                        </div>
                    </form>
                    <form class="form-floating mt-2">
                        <div class="row">
                            <div class="col">
                                <label style="color:#ced4da" for="Serie">Serie</label>
                                <input type="text" class="form-control" id="Serie" placeholder="Serie">
                            </div>
                        </div>
                    </form>
                    <form class="form-floating mt-2">
                        <div class="row">
                            <div class="col">
                                <label style="color:#ced4da" for="floatingInputValue" id="InputModelo">Cfop</label>
                                <input type="text" class="form-control" id="Cfop" placeholder="Cfop">
                            </div>
                        </div>
                    </form>
                    <p class="mt-1 mb-0">Gerar para todos:</p>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="" id="CheckTodosCfops">
                        <label class="form-check-label" for="flexCheckChecked">
                            Cfops
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="" id="CheckTodasSeries">
                        <label class="form-check-label" for="flexCheckChecked">
                            Series
                        </label>
                    </div>
                </div>
            </div>


            <div class="col-6">
                <div id="AcaoParaInclusaoProduto" style="display:none; border:2px solid #ced4da;" class="p-2">
                    <form class="form-floating">
                        <input type="text" class="form-control" id="CodigoAjuste" placeholder="Digite o Código do ajuste">
                        <label style="color:#ced4da" for="floatingInputValue" id="InputCodigoProduto">Código do ajuste</label>
                    </form>
                    <form class="form-floating mt-2">
                        <input type="text" class="form-control" id="DescricaoComplementar" placeholder="Digite a Descrição Complementar">
                        <label style="color:#ced4da" for="floatingInputValue" id="InputTipoOperacao">Descrição Complementar</label>
                    </form>
                    <form class="form-floating mt-2">
                        <input type="text" class="form-control" id="Aliquota" placeholder="Digite a Aliquota">
                        <label style="color:#ced4da" for="floatingInputValue" id="InputAliquotaProduto">Aliquota</label>
                    </form>
                    <p class="mt-1 mb-0">Gerar cálculo com:</p>
                    <form>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="baseOptions" id="RadiobaseCalculo" value="baseCalculo" checked>
                            <label class="form-check-label" for="baseCalculo">
                                Base Cálculo
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="baseOptions" id="RadiobaseIcms" value="baseIcms">
                            <label class="form-check-label" for="baseIcms">
                                Base ICMS
                            </label>
                        </div>
                    </form>
                </div>

            </div>
        </div>
        <div class="row mt-3">
            <div class="upload-container"
                 id="uploadContainer"
                 ondrop="handleDrop(event)"
                 ondragover="handleDragOver(event)">
                <input type="file" id="fileInput" multiple onchange="handleFilesSelected(event)" />
                <p>Ou arraste os arquivos aqui</p>
            </div>
            <div class="col-4 mb-4">
                <button id="BtnAlteraAquivos" onclick="alterarArquivos()" style="visibility:hidden">Alterar Arquivos</button>
                <button id="BtnDownloadAquivos" onclick="downloadArquivos()" style="visibility:hidden">Download Arquivos Modificados</button>
            </div>
            <div id="fileContentContainer">
                <h4>Conteúdo dos Arquivos:</h4>
                <div id="fileContents"></div>
            </div>
        </div>
    </div>
    <div id="loadingScreen" class="loading-screen">
        <div class="spinner"></div>
        <p>Carregando...</p>
    </div>






    <script>
        let files = [];

        function handleFilesSelected(event) {
            files = Array.from(event.target.files);
            displayFileContents();
        }

        function handleDrop(event) {
            event.preventDefault();
            files = Array.from(event.dataTransfer.files);
            displayFileContents();
        }

        function handleDragOver(event) {
            event.preventDefault();
        }

        function displayFileContents() {
            const BtnalterarArquivos = document.getElementById('BtnAlteraAquivos');
            BtnalterarArquivos.style.visibility = "visible";

            const fileContentsContainer = document.getElementById('fileContents');
            fileContentsContainer.innerHTML = ''; // Limpa o conteúdo anterior
            files.forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const fileContent = e.target.result;
                    const fileEntry = document.createElement('div');
                    fileEntry.classList.add('file-entry');
                    fileEntry.innerHTML = `
                                <h5>Arquivo ${index + 1}:</h5>
                                <pre class="file-content" id="fileContent-${index}">${fileContent}</pre>
                                `;
                    fileContentsContainer.appendChild(fileEntry);
                };
                reader.readAsText(file);
            });
            document.getElementById('fileContentContainer').style.display = 'block';
        }







        function alterarArquivos() {
            const BlocosD195D197 = document.getElementById("CheckD195d197").checked,
            Modelo = document.getElementById("ModeloDropDown").value,
            Serie = document.getElementById("Serie").value,
            Cfop = document.getElementById("Cfop").value,
            TodosCfop = document.getElementById("CheckTodosCfops").checked,
            TodasSeries = document.getElementById("CheckTodasSeries").checked,
            CodigoAjuste = document.getElementById("CodigoAjuste").value,
            DescricaoComplementar = document.getElementById("DescricaoComplementar").value,
            Aliquota = document.getElementById("Aliquota").value.replace(/\./g, ","),
            RadioBcOuIcms = document.getElementById("RadiobaseCalculo").checked ? "Bc" : "Icms",
            CodObservacao = Math.floor(Math.random() * 900000) + 100000,
            divAcaoParaInclusaoSelecionaBloco = document.getElementById('AcaoParaInclusaoSelecionaBloco'),
            displayStyle = window.getComputedStyle(divAcaoParaInclusaoSelecionaBloco).display,
            BtnDownloadAquivos = document.getElementById('BtnDownloadAquivos');

            let contadorNovasLinhas = 0, ValorIcms = "0", ValorBc = "0", ValorCalculado = "0",
                D100Campo2, D100Campo3, ModeloArquivo = "Não", CfopArquivo = "", ValorParaCalculo,
                SerieArquivo, SomaValoresCalculados = 0, UltimoRegistroAntes0460, LinhaUltimoRegistroAntes0460, linhas9900 = [];

            if (displayStyle === "none") {
                ModalValidaSistema('Alerta', 'Para prosseguir é necessário selecionar o tipo de ajuste');
            }
            else if (!BlocosD195D197) {
                ModalValidaSistema('Alerta', 'Para prosseguir é necessário selecionar o registro para inclusão');
            }
            else if (CodigoAjuste === "") {
                ModalValidaSistema('Alerta', 'Para prosseguir é necessário informar o campo Codigo Ajuste');
            }
            else if (DescricaoComplementar === "") {
                ModalValidaSistema('Alerta', 'Para prosseguir é necessário informar o campo Descricao Complementar');
            }
            else if (Aliquota === "") {
                ModalValidaSistema('Alerta', 'Para prosseguir é necessário informar o campo Aliquota');
            }
            else if (Modelo === "") {
                ModalValidaSistema('Alerta', 'Para prosseguir é necessário selecionar um Modelo para ajuste');
            }
            else if (Cfop == "" && !TodosCfop) {
                ModalValidaSistema('Alerta', 'Para prosseguir é necessário informar um Cfop ou marcar o campo Todos Cfops');
            }
            else if (Serie == "" && !TodasSeries) {
                ModalValidaSistema('Alerta', 'Para prosseguir é necessário informar uma Serie ou marcar o campo Todas Series');
            }
            else {
                BtnDownloadAquivos.style.visibility = "visible";
            }

            


            files.forEach((file, index) => {
                const fileContentElement = document.getElementById(`fileContent-${index}`);
                if (fileContentElement) {
                    let fileContent = fileContentElement.textContent;

                    let lines = fileContent.split('\n');
                    let newLines = [];

                    for (let i = 0; i < lines.length; i++) { //Aqui dentro está tudo ajustado e padronizado

                        newLines.push(lines[i]);
                        let valor = lines[i].split('|');

                        if (lines[i].startsWith('|0990|')) {
                            let resultado = CalculaRegistro(lines[i], 2, 1, 'adicao').toString();
                            newLines[newLines.length - 1] = AtualizaRegistro(lines[i], 2, resultado);
                        }

                        if (lines[i].startsWith('|D100|')) {
                            D100Campo2 = valor[2];
                            D100Campo3 = valor[3];
                            ModeloArquivo = valor[5];
                            SerieArquivo = valor[7];
                        }

                        if (lines[i].startsWith('|D190|')) {
                            CfopArquivo = valor[3];
                            ValorBc = valor[6];
                            ValorIcms = valor[7];

                            ValorParaCalculo = RadioBcOuIcms == "Bc" ? ValorBc : ValorIcms

                            ValorCalculado = calcularValorTributo(ValorParaCalculo, Aliquota);

                            if ((D100Campo2 == "1" && D100Campo3 == "0") && (TodosCfop || CfopArquivo == Cfop) && (Modelo == "Todos" || Modelo == ModeloArquivo) && (TodasSeries || SerieArquivo == Serie)) {
                                if (CheckD195d197.checked && (!isNaN(parseFloat(ValorCalculado.replace(",", "."))) || (parseFloat(ValorCalculado.replace(",", "."))))) {

                                    newLines.push(`|D195|${CodObservacao}|${DescricaoComplementar}|`);
                                    newLines.push(`|D197|${CodigoAjuste}|${DescricaoComplementar}||${ValorParaCalculo}|${Aliquota}|${ValorCalculado}||`);

                                    contadorNovasLinhas += 1

                                    SomaValoresCalculados += parseFloat(ValorCalculado.replace(',', '.'));

                                }
                            }
                        }

                        if (lines[i].startsWith('|D990|')) {
                            let resultado = CalculaRegistro(lines[i], 2, parseInt(contadorNovasLinhas), 'multiplicacao', 'D990').toString();
                            newLines[newLines.length - 1] = AtualizaRegistro(lines[i], 2, resultado);
                        }

                        if (parseInt(lines[i].split('|')[1]) < 460) {
                            UltimoRegistroAntes0460 = lines[i].split('|')[1];
                            LinhaUltimoRegistroAntes0460 = i;
                        }

                        if (lines[i].startsWith('|E110|')) {
                            let ResultadoVlAjusteCredito = CalculaRegistro(lines[i], 7, SomaValoresCalculados, 'adicao');
                            newLines[newLines.length - 1] = AtualizaRegistro(lines[i], 7, 0, 'alterar', ResultadoVlAjusteCredito.toFixed(2).toString().replace('.', ','))
                        }

                        if (lines[i].startsWith('|9900|')) {
                            linhas9900.push(lines[i])
                        }

                        if (lines[i].startsWith('|9990|')) {
                            let resultado = CalculaRegistro(lines[i], 2, 3, 'adicao').toString();
                            newLines[newLines.length - 1] = AtualizaRegistro(lines[i], 2, resultado);
                        }

                        if (lines[i].startsWith('|9999|')) {
                            let resultado = CalculaRegistro(lines[i], 2, 3, 'adicao').toString();
                            newLines[newLines.length - 1] = AtualizaRegistro(lines[i], 2, resultado);
                        }

                    }

















                    let indice = newLines.findIndex(linha => linha.includes(converterLetraParaNumero(linhas9900, 'D195')));

                    let novaLinha9900D195 = `|9900|D195|${contadorNovasLinhas}|`;
                    let novaLinha9900D197 = `|9900|D197|${contadorNovasLinhas}|`;

                    // console.log(indice, novaLinha )

                    if (indice !== -1) {
                        newLines.splice(indice + 1, 0, novaLinha9900D195);
                        newLines.splice(indice + 2, 0, novaLinha9900D197);
                    }


                    function converterLetraParaNumero(arrayLinhas, campoParaInserir = "") {
                        const letrasAlfabeto = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"];
                        let valoresConvertidos = [];

                        arrayLinhas.forEach(linha => {
                            let partes = linha.split('|');
                            let letra = partes[2][0]; // Obtém a primeira letra

                            if (letrasAlfabeto.includes(letra.toUpperCase())) {
                                let numero = letra.toUpperCase().charCodeAt(0) - 64; // Converte a letra para número

                                // Substitui a primeira letra pela conversão
                                partes[2] = '99' + numero + partes[2].substring(1);

                                // Junta as partes de volta e armazena no array
                                linha = partes.join('|');
                                valoresConvertidos.push(linha); // Adiciona a linha modificada ao array
                            } else {
                                linha = partes.join('|');
                                valoresConvertidos.push(linha)
                            }
                        });

                        let campo = letrasAlfabeto.includes(campoParaInserir[0]) ? campoParaInserir.toUpperCase().charCodeAt(0) - 64 : campoParaInserir[0]
                        let parametroAjustado = '99' + campo + campoParaInserir.substring(1);
                        // console.log('parametro', '99' + campo + campoParaInserir.substring(1));
                        // console.log(valoresConvertidos);
                        let resultado = encontrarValorAntesDoParametro(valoresConvertidos, parametroAjustado)
                        //   console.log(resultado);
                        return resultado == null ? null : resultado;
                    }


                    function encontrarValorAntesDoParametro(arrayLinhas, valorParametro) {
                        let valorAnterior = null;
                        let parte03 = '';

                        for (let i = 0; i < arrayLinhas.length; i++) {
                            let partes = arrayLinhas[i].split('|');
                            let valorAtual = partes[2]; // valor atual

                            if (parseInt(valorAtual) < parseInt(valorParametro)) {
                                valorAnterior = valorAtual;
                                parte03 = partes[3];
                            }
                        }
                        let retorno = '';
                        //console.log(valorAnterior[2])
                        //console.log(numeroParaLetra(parseInt(valorAnterior[2])));
                        retorno = '|9900|' + numeroParaLetra(parseInt(valorAnterior[2])) + valorAnterior.substring(3) + '|' + parte03 + '|'
                        return retorno;
                    }

                    function numeroParaLetra(numero) {
                        // Transforma o número em letra correspondente
                        return String.fromCharCode(numero + 64);
                    }


                    if (lines[LinhaUltimoRegistroAntes0460].startsWith(`|${UltimoRegistroAntes0460}|`)) {
                        newLines.splice(LinhaUltimoRegistroAntes0460 + 1, 0, `|0460|${CodObservacao}|${DescricaoComplementar}|`);
                    }

                    // Junta as linhas modificadas de volta em uma string
                    fileContent = newLines.join('\n');
                    fileContentElement.textContent = fileContent;

                    // Cria um novo arquivo com o conteúdo modificado
                    files[index] = new File([fileContent], file.name, { type: file.type });
                }
            });


            if (contadorNovasLinhas > 1) {
                document.getElementById('loadingScreen').style.display = 'flex';
                setTimeout(function() {
                    document.getElementById('loadingScreen').style.display = 'none';
                    var toastEl = document.getElementById('alertToastSucesso');
                    var toast = new bootstrap.Toast(toastEl);
                    toast.show();
                    return;
                }, 1000);
            } 
@*             else {
                BtnDownloadAquivos.style.visibility = "";
                var toastEl = document.getElementById('alertToastFalha');
                var toast = new bootstrap.Toast(toastEl);
                toast.show();
                return;

            } *@

        }


        function downloadArquivos() {
            files.forEach((file, index) => {
                const fileContent = document.getElementById(`fileContent-${index}`).textContent;
                const fileBytes = new TextEncoder().encode(fileContent);
                const base64Data = arrayBufferToBase64(fileBytes.buffer);

                const link = document.createElement('a');
                link.href = 'data:text/plain;base64,' + base64Data;
                link.download = `Novo-${file.name}`;
                link.click();
            });
        }

        function arrayBufferToBase64(buffer) {
            let binary = '';
            const bytes = new Uint8Array(buffer);
            const len = bytes.byteLength;
            for (let i = 0; i < len; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            return window.btoa(binary);
        }

        function BtnTipoAjusteInclusao() {
            var blocosVisible = document.getElementById("AcaoParaInclusaoSelecionaBloco");
            var incluiProdutoVisible = document.getElementById("AcaoParaInclusaoProduto");
            let AcaoParaDefinirCfopEModelo = document.getElementById("AcaoParaDefinirCfopEModelo");
            blocosVisible.style.display = "block";
            incluiProdutoVisible.style.display = "block";
            AcaoParaDefinirCfopEModelo.classList.remove("invisible");

        }

        document.getElementById('CheckTodasSeries').addEventListener('click', function() {
            document.getElementById("Serie").disabled = this.checked;
            const Serie = document.getElementById("Serie").value;
            document.getElementById("Serie").value = this.checked ? "" : Serie;
        })

        document.getElementById('CheckTodosCfops').addEventListener('click', function() {
            document.getElementById("Cfop").disabled = this.checked;
            const Cfop = document.getElementById("Cfop").value;
            document.getElementById("Cfop").value = this.checked ? "" : Cfop;
        })


        function AtualizaRegistro(lines, posicaoAjuste, valorIncluir = '') { //Nova Função para melhorar o codigo
            let values = lines.split('|');
            values[posicaoAjuste] = valorIncluir;

            lines = values.join('|');
            return lines;
        }

        function CalculaRegistro(line, posicaoDoValor, valorParaCalcular, tipoOperacao = 'adicao', registro = '') { //Nova Função para melhorar o codigo
            let values = line.split('|');
            let resultado;

            if (tipoOperacao === 'adicao') {
                resultado = parseFloat(valorParaCalcular) + parseFloat(values[posicaoDoValor].replace(',', '.'))
            } else if (tipoOperacao === 'multiplicacao' && registro === 'D990') {
                resultado = parseInt(values[posicaoDoValor]) + (parseInt(valorParaCalcular) * 2)
            }
            return resultado;
        }

        function ModalValidaSistema(tipoValidacao, mensagem) { //Nova Função para melhorar o codigo
            var toastEl = document.getElementById('ValidaSistema'), mensagemValidaSistema = document.getElementById('MensagemValidaSistema'),
                tituloValidaSistema = document.getElementById('TituloValidaSistema');
            if (tipoValidacao === 'Sucesso') {
                toastEl.classList = 'toast bg-success text-dark border-0';
                tituloValidaSistema.innerText = 'Sucesso';
                mensagemValidaSistema.innerText = mensagem;
            } else if (tipoValidacao === 'Falha') {
                toastEl.classList = 'toast bg-danger text-dark border-0';
                tituloValidaSistema.innerText = 'Falha';
                mensagemValidaSistema.innerText = mensagem;
            } else {
                toastEl.classList = 'toast bg-warning text-dark border-0';
                tituloValidaSistema.innerText = 'Alerta'
                mensagemValidaSistema.innerText = mensagem;
            }

            var toast = new bootstrap.Toast(toastEl);
            toast.show();
            return;
        }

        function calcularValorTributo(valorCalculado, aliquotaStr) {//Nova Função para melhorar o codigo

            let baseCalculo = parseFloat(valorCalculado.replace(/\./g, "").replace(",", ".")), aliquota = parseFloat(aliquotaStr.replace(",", ".")),
                valorTributo = baseCalculo * (aliquota / 100), valorTributoStr = valorTributo.toFixed(2).replace(".", ",");

            valorTributoStr = valorTributoStr.padStart(valorCalculado.length, '0');

            return valorTributoStr;
        }
    </script>
}
else
{

    // <p> <b>Para acessar esse módulo é necessário fazer Login.</b> <br /> <a href="/Login"> <b>Clique aqui para fazer Login</b> </a></p>

    <div class="position-fixed top-0 end-0 p-3" style="z-index: 11">
        <div id="alertLogin" class="bg-danger text-dark border-0 p-3 rounded" role="alert">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <strong class="me-auto">Alerta</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                <b>Para acessar esse módulo é necessário fazer Login.</b> <br /> <a href="/JeLSolucoesFiscais/EfdPisCofins"> <b>Clique aqui para fazer Login</b> </a>
            </div>
        </div>
    </div>

}


@code {
    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await LocalStorageService.GetItemAsync("isAuthenticated") == "true";
    }
}