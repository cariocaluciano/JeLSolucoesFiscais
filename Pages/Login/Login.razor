@page "/Login"
@using JeLSolucoesFiscais.Aplicacao
@using JeLSolucoesFiscais.Aplicacao.Criptografias
@using JeLSolucoesFiscais.Aplicacao.Usuario
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject UsuariosCadastrados UsuariosCadastrados
@inject NavigationManager NavigationManager
@inject LocalStorageService LocalStorageService
@inject IJSRuntime JS


<PageTitle>Login</PageTitle>

<div class="login-container">
  <h3>Login</h3>

  <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-2">
      <div class="row">
        <div class="col-4">
          <label for="email">Email:</label>
          <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
        </div>
      </div>
    </div>

    <div class="form-group mb-2">
      <div class="row">
        <div class="col-4">
          <label for="senha">Senha:</label>
          <InputText id="senha" type="password" class="form-control" @bind-Value="loginModel.Senha" />
        </div>
      </div>
    </div>

    <button type="submit" class="btn btn-primary">Login</button>

    @if (loginFailed)
    {
      <div class="alert alert-danger mt-3">Credenciais inválidas. Tente novamente.</div>
    }
    @if (sucess)
    {
      <div class="alert alert-sucess mt-3">Redirecionando.</div>
    }
    @if (Inadimplente)
    {
      <div class="alert alert-danger mt-3">Seu contrato se encontra vencido, entre em contato conosco. Clique no nosso Chat</div>
    }
  </EditForm>
</div>

@code {
  private LoginModel loginModel = new LoginModel();
  private bool loginFailed = false;
  private bool Inadimplente = false;
  private bool sucess = false;


  private async Task HandleLogin()
  {

    string? retorno = await JS.InvokeAsync<string>("Login", loginModel.Email.ToString(), loginModel.Senha.ToString());

    if (retorno == "sucesso")
    {
      NavigationManager.NavigateTo("/JeLSolucoesFiscais", true);
    }
    else {
      loginFailed = true;
    }
  }

  public class LoginModel
  {
    [Required(ErrorMessage = "Email é obrigatório")]
    public string Email { get; set; }

    [Required(ErrorMessage = "Senha é obrigatória")]
    public string Senha { get; set; }
  }
}