

<style>
    #chatbot-button {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 70px;
        height: 70px;
        border-radius: 50%;
        background-image: url('chat.png');
        background-size: cover;
        cursor: pointer;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    }
        #chatbot-button:hover {
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.4);
        }

        #chatbot-button::after {
            content: 'Chatbot';
            position: absolute;
            top: -30px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #333;
            color: white;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 14px;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        #chatbot-button:hover::after {
            opacity: 1;
        }

        #unread-indicator {
            position: absolute;
            top: -5px;
            right: -5px;
            width: 20px;
            height: 20px;
            background-color: red;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            font-size: 12px;
            font-weight: bold;
        }

        #chatbot-modal {
            display: none;
            position: fixed;
            bottom: 100px;
            right: 20px;
            width: 400px;
            height: 600px;
            background-color: #f0f0f0;
            border-radius: 15px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
            overflow: hidden;
        }

        #chat-messages {
            height: 500px;
            overflow-y: auto;
            padding: 20px;
        }

        .message {
            max-width: 80%;
            margin-bottom: 15px;
            padding: 10px;
            border-radius: 20px;
            clear: both;
        }

        .bot {
            float: left;
            background-color: #FF69B4;
            color: white;
        }

        .user {
            float: right;
            background-color: #1E90FF;
            color: white;
        }

        #user-input {
            width: 100%;
            padding: 15px;
            border: none;
            border-top: 1px solid #ccc;
            font-size: 16px;
        }

        .typing {
            font-style: italic;
            color: #888;
        }
</style>

    <div id="chatbot-button">
        <div id="unread-indicator" style="display: none;">1</div>
    </div>
    <div id="chatbot-modal" style="display: none;">
        <div id="chat-messages"></div>
        <input type="text" id="user-input" placeholder="Digite sua resposta...">
    </div>


<script>
            const chatbotButton = document.getElementById('chatbot-button');
            const chatbotModal = document.getElementById('chatbot-modal');
            const chatMessages = document.getElementById('chat-messages');
            const userInput = document.getElementById('user-input');

            let currentStep = 0;
            const steps = ['nome', 'email', 'whatsapp', 'mensagem'];
            const userInfo = {};
            let hasUnreadMessage = true; // Set this to true initially or when a new message arrives

            function updateUnreadIndicator() {
                const unreadIndicator = document.getElementById('unread-indicator');
                unreadIndicator.style.display = hasUnreadMessage ? 'flex' : 'none';
            }

            chatbotButton.addEventListener('click', () => {
                if (chatbotModal.style.display === 'none') {
                    chatbotModal.style.display = 'block';
                    if (currentStep === 0) {
                        nextStep();
                    }
                    hasUnreadMessage = false;
                    updateUnreadIndicator();
                } else {
                    if (currentStep === 0) {
                        // Limpa o conteúdo do chat
                        chatMessages.innerHTML = '';
                        // Reseta o passo atual
                        currentStep = 0;
                        // Limpa as informações do usuário
                        Object.keys(userInfo).forEach(key => delete userInfo[key]);
                    }
                    chatbotModal.style.display = 'none';
                }
            });

            userInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    const userMessage = userInput.value.trim();
                    if (userMessage) {
                        addMessage(userMessage, 'user');
                        userInfo[steps[currentStep]] = userMessage;
                        userInput.value = '';
                        currentStep++;
                        nextStep();
                    }
                }
            });

            function addMessage(message, sender) {
                const messageElement = document.createElement('div');
                messageElement.classList.add('message', sender);
                messageElement.textContent = message;
                chatMessages.appendChild(messageElement);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            function showTyping() {
                const typingElement = document.createElement('div');
                typingElement.classList.add('message', 'bot', 'typing');
                typingElement.textContent = "Digitando...";
                chatMessages.appendChild(typingElement);
                chatMessages.scrollTop = chatMessages.scrollHeight;
                return typingElement;
            }

            function nextStep() {
                const typingElement = showTyping();
                setTimeout(() => {
                    chatMessages.removeChild(typingElement);
                    switch (currentStep) {
                        case 0:
                            addMessage("Olá! Como você gostaria de ser chamado.", 'bot');
                            break;
                        case 1:
                            addMessage("Ótimo! Agora, me fale qual é o seu e-mail?", 'bot');
                            break;
                        case 2:
                            addMessage("Perfeito! E qual é o seu WhatsApp?", 'bot');
                            break;
                        case 3:
                            addMessage("Agora, me fale um pouco sobre o que você precisa.", 'bot');
                            break;
                        case 4:
                            sendEmail();
                            break;
                    }
                }, 500); // Aguarda 1.5 segundos antes de responder
            }

            function sendEmail() {
                const formattedMessage = `
    Nome: ${userInfo.nome}
    E-mail: ${userInfo.email}
    WhatsApp: ${userInfo.whatsapp}

    Mensagem:
    ${userInfo.mensagem}
                `.trim();

                const typingElement = showTyping();

                emailjs.send("service_do1d16k", "template_v80jv2f", {
                    message: formattedMessage
                }).then(function(response) {
                    console.log("SUCCESS", response);
                    chatMessages.removeChild(typingElement);
                    addMessage("Entraremos em contato com você em breve!", 'bot');
                }, function(error) {
                    console.log("FAILED", error);
                    chatMessages.removeChild(typingElement);
                    addMessage("Hmmm... parece que houve um erro. mas fique tranquilo você pode entrar em contato com a gente através do nosso email: jelSolucoesFiscais@gmail.com", 'bot');
                });
            }

            // Call this function initially to show the unread indicator
            updateUnreadIndicator();
</script>
@code {

}
