@page "/RelatorioMonofasico/CfopPorNcm"

<PageTitle>SoluFiscal</PageTitle>

<style>
    /* Estilos básicos */
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        background-color: #f0f0f0;
    }
    .container {
        max-width: 600px;
        margin: 0 auto;
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    h1 {
        color: #333;
    }

    #fileInputRel {
        margin-bottom: 10px;
    }
    #importButton {
        background-color: #4CAF50;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    #importButton:hover {
        background-color: #45a049;
    }
    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.4);
    }
    .modal-content {
        background-color: #fefefe;
        margin: 5% auto; /* Alterado de 15% para 5% para dar mais espaço */
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 800px; /* Aumentado para dar mais espaço ao conteúdo */
        height: 80vh; /* Altura fixa de 80% da altura da viewport */
        border-radius: 8px;
        display: flex;
        flex-direction: column;
    }
    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }
    .modal-body {
        flex-grow: 1;
        overflow-y: auto; /* Adiciona scroll vertical */
        padding-right: 10px; /* Espaço para a barra de rolagem */
    }
    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }
    .close:hover {
        color: #000;
    }
    #downloadButton {
        background-color: #008CBA;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin-top: 10px;
        align-self: flex-end;
    }
    #downloadButton:hover {
        background-color: #007B9A;
    }
    /* Estilos para a tabela no relatório */
    #reportContent table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
    }
    #reportContent th, #reportContent td {
        border: 1px solid #ddd;
        padding: 10px;
        text-align: left;
    }
    #reportContent th {
        background-color: #f2f2f2;
        font-weight: bold;
    }
    #reportContent tr:nth-child(even) {
        background-color: #f9f9f9;
    }
    #importedFilesCount {
        margin-top: 10px;
        font-weight: bold;
    }
    .total-row {
        font-weight: bold;
        background-color: #e6e6e6;
    }
</style>

        <div class="container">
        <h1>Importação de XML e Geração de Relatório</h1>
        <input type="file" id="fileInputRel" accept=".xml" multiple>
        <button id="importButton">Importar e Gerar Relatório</button>
        <div id="importedFilesCount"></div>
    </div>

    <div id="reportModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Relatório</h2>
                <span class="close" onclick="CloseButon_Onclick"&times;</span>
            </div>
            <div class="modal-body">
                <div id="reportContent"></div>
            </div>
            <button id="downloadButton">Download do Relatório</button>
        </div>
    </div>


        <script>


    if (performance.navigation.type === performance.navigation.TYPE_RELOAD) {
        const fileInputRel = document.getElementById('fileInputRel');
    } else {
        fileInputRel = document.getElementById('fileInputRel');
    }

    if (performance.navigation.type === performance.navigation.TYPE_RELOAD) {
        const importButton = document.getElementById('importButton');
    } else {
        importButton = document.getElementById('importButton');
    }

    // if (performance.navigation.type === performance.navigation.TYPE_RELOAD) {
    //     const modal = document.getElementById('reportModal');
    // } else {
    //     modal = document.getElementById('reportModal');
    // }

    // if (performance.navigation.type === performance.navigation.TYPE_RELOAD) {
    //     const closeButton = document.getElementsByClassName('close')[0];
    // } else {
    //     closeButton = document.getElementsByClassName('close')[0];
    // }

    if (performance.navigation.type === performance.navigation.TYPE_RELOAD) {
        const reportContent = document.getElementById('reportContent');
    } else {
        reportContent = document.getElementById('reportContent');
    }

    if (performance.navigation.type === performance.navigation.TYPE_RELOAD) {
        const downloadButton = document.getElementById('downloadButton');
    } else {
        downloadButton = document.getElementById('downloadButton');
    }

    if (performance.navigation.type === performance.navigation.TYPE_RELOAD) {
        const importedFilesCount = document.getElementById('importedFilesCount');
    } else {
        importedFilesCount = document.getElementById('importedFilesCount');
    }


        importButton.addEventListener('click', () => {
            const files = fileInputRel.files;
            if (files.length > 0) {
                importedFilesCount.textContent = `Arquivos selecionados: ${files.length}`;
                processFiles(files);
            } else {
                alert('Por favor, selecione pelo menos um arquivo XML.');
            }
        });

        async function processFiles(files) {
            const reports = [];
            for (let file of files) {
                const xmlContent = await readFile(file);
                const report = generateReport(xmlContent);
                reports.push(report);
            }
            const combinedReport = combineReports(reports);
            displayReport(combinedReport);
        }

        function readFile(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = (e) => resolve(e.target.result);
                reader.onerror = (e) => reject(e);
                reader.readAsText(file);
            });
        }

        function generateReport(xmlContent) {
            const parser = new DOMParser();
            const xmlDoc = parser.parseFromString(xmlContent, 'text/xml');

            return Array.from(xmlDoc.getElementsByTagName('det')).map(det => {
                const ncm = det.querySelector('NCM')?.textContent || 'N/A';
                const cfop = det.querySelector('CFOP')?.textContent || 'N/A';
                const totalValue = parseFloat(det.querySelector('vProd')?.textContent) || 0;

                return { ncm, cfop, totalValue };
            });
        }

        function combineReports(reports) {
            const cfopByNcm = {};
            let grandTotal = 0;

            reports.flat().forEach(item => {
                if (!cfopByNcm[item.ncm]) {
                    cfopByNcm[item.ncm] = {};
                }
                if (!cfopByNcm[item.ncm][item.cfop]) {
                    cfopByNcm[item.ncm][item.cfop] = 0;
                }
                cfopByNcm[item.ncm][item.cfop] += item.totalValue;
                grandTotal += item.totalValue;
            });

            return generateReportHtml(cfopByNcm, grandTotal);
        }

        function generateReportHtml(cfopByNcm, grandTotal) {
            let reportHtml = '<h2>Relatório de Total de Valores de CFOP por NCM</h2>';
            reportHtml += '<table><tr><th>NCM</th><th>CFOP</th><th>Valor Total</th></tr>';

            for (const [ncm, cfopData] of Object.entries(cfopByNcm)) {
                for (const [cfop, totalValue] of Object.entries(cfopData)) {
                    reportHtml += `
                        <tr>
                            <td>${ncm}</td>
                            <td>${cfop}</td>
                            <td>R$ ${totalValue.toFixed(2)}</td>
                        </tr>
                    `;
                }
            }

            // Adiciona a linha de total geral
            reportHtml += `
                <tr class="total-row">
                    <td colspan="2">Total Geral</td>
                    <td>R$ ${grandTotal.toFixed(2)}</td>
                </tr>
            `;

            reportHtml += '</table>';
            return reportHtml;
        }

        function displayReport(report) {
            reportContent.innerHTML = report;
            document.getElementById('reportModal').style.display = 'block';
        }

        // closeButton.onclick = () => {
        //     modal.style.display = 'none';
        // };

        function CloseButon_Onclick() {
            document.getElementById('reportModal').style.display = 'none';
        }

        window.onclick = (event) => {
            if (event.target == document.getElementById('reportModal')) {
                document.getElementById('reportModal').style.display = 'none';
            }
        };

        downloadButton.onclick = async () => {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            
            const content = document.getElementById('reportContent');
            const canvas = await html2canvas(content);
            const imgData = canvas.toDataURL('image/png');

            const imgProps = doc.getImageProperties(imgData);
            const pdfWidth = doc.internal.pageSize.getWidth();
            const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;

            const margin = 20; // Margem em milímetros
            const contentWidth = pdfWidth - (2 * margin);
            const contentHeight = (contentWidth * imgProps.height) / imgProps.width;

            doc.addImage(imgData, 'PNG', margin, margin, contentWidth, contentHeight);

            // Adicionar páginas adicionais se o conteúdo for muito longo
            if (contentHeight > doc.internal.pageSize.getHeight() - (2 * margin)) {
                let remainingHeight = contentHeight;
                let position = -(doc.internal.pageSize.getHeight() - (2 * margin));

                while (remainingHeight > 0) {
                    doc.addPage();
                    doc.addImage(imgData, 'PNG', margin, margin + position, contentWidth, contentHeight);
                    remainingHeight -= (doc.internal.pageSize.getHeight() - (2 * margin));
                    position -= (doc.internal.pageSize.getHeight() - (2 * margin));
                }
            }

            doc.save('relatorio_combinado.pdf');
        };
    </script>


@code {

}
